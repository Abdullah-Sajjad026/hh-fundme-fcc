{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf5474a4f465fbf360e43e81356ca3c05366c3dc6bfeda4318c1bb3a0f0eb6d23",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "954453",
    "logsBloom": "0x
    "blockHash": "0xe354307bcd64a3b344ca5912f89a2baf18b3bc0e616baa93cd80f760c385e52a",
    "transactionHash": "0xf5474a4f465fbf360e43e81356ca3c05366c3dc6bfeda4318c1bb3a0f0eb6d23",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "954453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "de235d65d3d07024b66c8e4d2a2df061",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Abdullah Sajjad\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// 1. Pragma\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n// 2. Imports\\r\\n// importing AggregatorV3Interface of ChainLink Data Feeds.\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// 3. Interfaces, Libraries, Contracts\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**\\r\\n * @title A sample Funding Contract\\r\\n * @author Abdullah Sajjad\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\n\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State Variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n    address private immutable i_owner;\\r\\n    AggregatorV3Interface private immutable i_priceFeed;\\r\\n\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n\\r\\n    // Events (we have none!)\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* \\r\\n    Functions Order:\\r\\n        constructor\\r\\n        receive\\r\\n        fallback\\r\\n        external\\r\\n        public\\r\\n        internal\\r\\n        private\\r\\n        view / pure\\r\\n    */\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.convertEthToUSD(i_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"Didn't send enough!\\\"\\r\\n        );\\r\\n\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        for (uint256 i = 0; i < funders.length; i++) {\\r\\n            address funder = funders[i];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        // reset array\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        /*\\r\\n            Withdraw Funds: \\r\\n                1. transfer\\r\\n                2. send\\r\\n                3. call\\r\\n            solidity by example\\r\\n        */\\r\\n        // transfer\\r\\n        payable(msg.sender).transfer(address(this).balance); // throws error if failed\\r\\n\\r\\n        // send\\r\\n        bool sendStatus = payable(msg.sender).send(address(this).balance); // returns boolean\\r\\n        require(sendStatus, \\\"Send Failed\\\");\\r\\n\\r\\n        // call\\r\\n        (bool callStatus, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callStatus, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return i_priceFeed;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(\\r\\n        address funder\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ad84358d7e8a9bf2d05cee58e60e147e1b040544f64fc19b99e1dd5b69bb8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n// importing AggregatorV3Interface of ChainLink Data Feeds.\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getEthPriceInUSD(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        /* since we are interacting with a smart contract outside of ours,\\r\\n        we need its ABI and Adderss. */\\r\\n\\r\\n        /* \\r\\n            Network: Eth Goerli Testnet\\r\\n            Aggregator: ETH/USD\\r\\n            Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        */\\r\\n\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    function convertEthToUSD(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPriceInUSD = getEthPriceInUSD(priceFeed);\\r\\n        uint256 calculatedUSD = (ethAmount * ethPriceInUSD) /\\r\\n            1000000000000000000;\\r\\n        return calculatedUSD;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10a8ca5649e730a3645eb614077d53bbc07789b665a3852d8dc5834ee6e84aff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620011d0380380620011d0833981810160405281019062000037919062000116565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000148565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000de82620000b1565b9050919050565b620000f081620000d1565b8114620000fc57600080fd5b50565b6000815190506200011081620000e5565b92915050565b6000602082840312156200012f576200012e620000ac565b5b60006200013f84828501620000ff565b91505092915050565b60805160601c60a05160601c61104e62000182600039600081816101b801526106c901526000818161032d01526106a1015261104e6000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af919061091a565b6102e2565b6040516100c19190610960565b60405180910390f35b3480156100d657600080fd5b506100df61032b565b005b3480156100ed57600080fd5b506100f6610690565b6040516101039190610960565b60405180910390f35b34801561011857600080fd5b5061012161069d565b60405161012e919061098a565b60405180910390f35b34801561014357600080fd5b5061014c6106c5565b6040516101599190610a04565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610a4b565b6106ed565b6040516101a0919061098a565b60405180910390f35b6802b5e3af16b18800006101e67f00000000000000000000000000000000000000000000000000000000000000003461073490919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610ad5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d99190610b24565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561043357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103e9575b5050505050905060005b81518110156104be57600082828151811061045b5761045a610b7a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b690610ba9565b91505061043d565b50600067ffffffffffffffff8111156104da576104d9610bf2565b5b6040519080825280602002602001820160405280156105085781602001602082028036833780820191505090505b506000908051906020019061051e929190610810565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610565573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d690610c6d565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161060590610cbe565b60006040518083038185875af1925050503d8060008114610642576040519150601f19603f3d011682016040523d82523d6000602084013e610647565b606091505b505090508061068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290610d1f565b60405180910390fd5b505050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061070257610701610b7a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061074083610770565b90506000670de0b6b3a764000082866107599190610d3f565b6107639190610dc8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610e86565b5050509150506402540be400816108089190610f01565b915050919050565b828054828255906000526020600020908101928215610889579160200282015b828111156108885782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610830565b5b509050610896919061089a565b5090565b5b808211156108b357600081600090555060010161089b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e7826108bc565b9050919050565b6108f7816108dc565b811461090257600080fd5b50565b600081359050610914816108ee565b92915050565b6000602082840312156109305761092f6108b7565b5b600061093e84828501610905565b91505092915050565b6000819050919050565b61095a81610947565b82525050565b60006020820190506109756000830184610951565b92915050565b610984816108dc565b82525050565b600060208201905061099f600083018461097b565b92915050565b6000819050919050565b60006109ca6109c56109c0846108bc565b6109a5565b6108bc565b9050919050565b60006109dc826109af565b9050919050565b60006109ee826109d1565b9050919050565b6109fe816109e3565b82525050565b6000602082019050610a1960008301846109f5565b92915050565b610a2881610947565b8114610a3357600080fd5b50565b600081359050610a4581610a1f565b92915050565b600060208284031215610a6157610a606108b7565b5b6000610a6f84828501610a36565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610abf601383610a78565b9150610aca82610a89565b602082019050919050565b60006020820190508181036000830152610aee81610ab2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2f82610947565b9150610b3a83610947565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b6f57610b6e610af5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610bb482610947565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610be757610be6610af5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610c57600b83610a78565b9150610c6282610c21565b602082019050919050565b60006020820190508181036000830152610c8681610c4a565b9050919050565b600081905092915050565b50565b6000610ca8600083610c8d565b9150610cb382610c98565b600082019050919050565b6000610cc982610c9b565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d09600b83610a78565b9150610d1482610cd3565b602082019050919050565b60006020820190508181036000830152610d3881610cfc565b9050919050565b6000610d4a82610947565b9150610d5583610947565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8e57610d8d610af5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd382610947565b9150610dde83610947565b925082610dee57610ded610d99565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1881610df9565b8114610e2357600080fd5b50565b600081519050610e3581610e0f565b92915050565b6000819050919050565b610e4e81610e3b565b8114610e5957600080fd5b50565b600081519050610e6b81610e45565b92915050565b600081519050610e8081610a1f565b92915050565b600080600080600060a08688031215610ea257610ea16108b7565b5b6000610eb088828901610e26565b9550506020610ec188828901610e5c565b9450506040610ed288828901610e71565b9350506060610ee388828901610e71565b9250506080610ef488828901610e26565b9150509295509295909350565b6000610f0c82610e3b565b9150610f1783610e3b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5657610f55610af5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f9357610f92610af5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fd057610fcf610af5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561100d5761100c610af5565b5b82820290509291505056fea2646970667358221220a23c47f8f507be67c5522a3dab0113e46e7fd52c8c62115da28919d708941bbf64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e81461010c5780639e87a5cd14610137578063b60d428814610162578063d7b4750c1461016c57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af919061091a565b6102e2565b6040516100c19190610960565b60405180910390f35b3480156100d657600080fd5b506100df61032b565b005b3480156100ed57600080fd5b506100f6610690565b6040516101039190610960565b60405180910390f35b34801561011857600080fd5b5061012161069d565b60405161012e919061098a565b60405180910390f35b34801561014357600080fd5b5061014c6106c5565b6040516101599190610a04565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e9190610a4b565b6106ed565b6040516101a0919061098a565b60405180910390f35b6802b5e3af16b18800006101e67f00000000000000000000000000000000000000000000000000000000000000003461073490919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610ad5565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d99190610b24565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561043357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103e9575b5050505050905060005b81518110156104be57600082828151811061045b5761045a610b7a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b690610ba9565b91505061043d565b50600067ffffffffffffffff8111156104da576104d9610bf2565b5b6040519080825280602002602001820160405280156105085781602001602082028036833780820191505090505b506000908051906020019061051e929190610810565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610565573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d690610c6d565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161060590610cbe565b60006040518083038185875af1925050503d8060008114610642576040519150601f19603f3d011682016040523d82523d6000602084013e610647565b606091505b505090508061068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290610d1f565b60405180910390fd5b505050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061070257610701610b7a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061074083610770565b90506000670de0b6b3a764000082866107599190610d3f565b6107639190610dc8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610e86565b5050509150506402540be400816108089190610f01565b915050919050565b828054828255906000526020600020908101928215610889579160200282015b828111156108885782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610830565b5b509050610896919061089a565b5090565b5b808211156108b357600081600090555060010161089b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e7826108bc565b9050919050565b6108f7816108dc565b811461090257600080fd5b50565b600081359050610914816108ee565b92915050565b6000602082840312156109305761092f6108b7565b5b600061093e84828501610905565b91505092915050565b6000819050919050565b61095a81610947565b82525050565b60006020820190506109756000830184610951565b92915050565b610984816108dc565b82525050565b600060208201905061099f600083018461097b565b92915050565b6000819050919050565b60006109ca6109c56109c0846108bc565b6109a5565b6108bc565b9050919050565b60006109dc826109af565b9050919050565b60006109ee826109d1565b9050919050565b6109fe816109e3565b82525050565b6000602082019050610a1960008301846109f5565b92915050565b610a2881610947565b8114610a3357600080fd5b50565b600081359050610a4581610a1f565b92915050565b600060208284031215610a6157610a606108b7565b5b6000610a6f84828501610a36565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610abf601383610a78565b9150610aca82610a89565b602082019050919050565b60006020820190508181036000830152610aee81610ab2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2f82610947565b9150610b3a83610947565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b6f57610b6e610af5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610bb482610947565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610be757610be6610af5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64204661696c6564000000000000000000000000000000000000000000600082015250565b6000610c57600b83610a78565b9150610c6282610c21565b602082019050919050565b60006020820190508181036000830152610c8681610c4a565b9050919050565b600081905092915050565b50565b6000610ca8600083610c8d565b9150610cb382610c98565b600082019050919050565b6000610cc982610c9b565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d09600b83610a78565b9150610d1482610cd3565b602082019050919050565b60006020820190508181036000830152610d3881610cfc565b9050919050565b6000610d4a82610947565b9150610d5583610947565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8e57610d8d610af5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd382610947565b9150610dde83610947565b925082610dee57610ded610d99565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1881610df9565b8114610e2357600080fd5b50565b600081519050610e3581610e0f565b92915050565b6000819050919050565b610e4e81610e3b565b8114610e5957600080fd5b50565b600081519050610e6b81610e45565b92915050565b600081519050610e8081610a1f565b92915050565b600080600080600060a08688031215610ea257610ea16108b7565b5b6000610eb088828901610e26565b9550506020610ec188828901610e5c565b9450506040610ed288828901610e71565b9350506060610ee388828901610e71565b9250506080610ef488828901610e26565b9150509295509295909350565b6000610f0c82610e3b565b9150610f1783610e3b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5657610f55610af5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f9357610f92610af5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fd057610fcf610af5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561100d5761100c610af5565b5b82820290509291505056fea2646970667358221220a23c47f8f507be67c5522a3dab0113e46e7fd52c8c62115da28919d708941bbf64736f6c63430008080033",
  "devdoc": {
    "author": "Abdullah Sajjad",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}